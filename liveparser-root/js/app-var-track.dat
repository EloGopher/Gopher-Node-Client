VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 0 NestedParentType: ExpressionStatement > BlockStatement > VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: blockC = [] Operator: =
 Left Var Name: blockC
 Right(2) Var Name: []
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 1 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: blockC[1] = {} Operator: =
 Left Var Name: blockC[1]
 Right(4) Var Name: {}
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 2 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 7 Source: blockC[1].X= 5 Operator: =
 Left Var Name: blockC[1].X
 Right(6) Var Name: 5
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 3 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: blockC[2] = 5 Operator: =
 Left Var Name: blockC[2]
 Right(4) Var Name: 5
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 4 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: j = 1 Operator: =
 Left Var Name: j
 Right(2) Var Name: 1
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 5 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 49 Source: i = $(window).width()+window.innerHeight+5+a5(5)+a5($(w Operator: =
 Left Var Name: i
 Right(2) Var Name: $(window).width()+window.innerHeight+5+a5(5)+a5($(window).width())+a5(window.innerWidth)+blockC[2]+blockC[1].X+blockC[a1(2)]
        C) EXT. VAR: $(window).width() CallExpression left 20
        C) EXT. VAR: a5(5) CallExpression right 18
        C) EXT. VAR: a5($(window).width()) CallExpression right 17
        C) EXT. VAR: $(window).width() CallExpression 0 19
        C) EXT. VAR: a5(window.innerWidth) CallExpression right 16
        C) EXT. VAR: a1(2) CallExpression property 14
LogicalExpression
 HelperParentType: IfStatement HelperParentName: 6 NestedParentType: IfStatement Parent Type: test Indent: 10 Length : 15 Source: (a1(i)>j) && (i>4) && a5(5)>20 Operator: &&
 Left Var Name: (a1(i)>j) && (i>4)
 Right(10) Var Name: a5(5)>20
        C) EXT. VAR: a1(i) CallExpression left 13
        C) EXT. VAR: a5(5) CallExpression left 12

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 0 NestedParentType: BlockStatement > ExpressionStatement Parent Type: 0 Indent: 15 Length : 3 Source: 5>6 Operator: >
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: 0 Indent: 12 Length : 3 Source: k=0 Operator: =
 Left Var Name: k
 Right(2) Var Name: 0

BinaryExpression
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: test Indent: 10 Length : 3 Source: k<5 Operator: <
AssignmentExpression
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: update Indent: 10 Length : 5 Source: k=k+1 Operator: =
 Left Var Name: k
 Right(2) Var Name: k+1
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 0 NestedParentType: BlockStatement > ExpressionStatement Parent Type: expression Indent: 13 Length : 5 Source: i=k+5 Operator: =
 Left Var Name: i
 Right(2) Var Name: k+5

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 1 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 15 Length : 9 Source: k+' ==== '+a5(k)+i Operator: +
        A) EXT. VAR: a5(k) CallExpression right 17
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: 0 Indent: 12 Length : 3 Source: k=0 Operator: =
 Left Var Name: k
 Right(2) Var Name: 0

BinaryExpression
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: test Indent: 10 Length : 3 Source: k<10 Operator: <

UpdateExpression
 HelperParentType: VariableDeclaration HelperParentName: init NestedParentType: ForStatement > VariableDeclaration Parent Type: update Indent: 10 Length : 2 Source: k++ Operator: ++
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 0 NestedParentType: BlockStatement > ExpressionStatement Parent Type: expression Indent: 13 Length : 5 Source: i=k+5 Operator: =
 Left Var Name: i
 Right(2) Var Name: k+5

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 1 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 15 Length : 9 Source: k+' ==== '+a5(k)-i Operator: -
        A) EXT. VAR: a5(k) CallExpression right 17
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 9 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: info = {} Operator: =
 Left Var Name: info
 Right(2) Var Name: {}
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 10 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: info.name ='hi' Operator: =
 Left Var Name: info.name
 Right(4) Var Name: 'hi'
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 11 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 11 Source: blockA = {firstName:'John', lastName:'Doe', age:50, eye Operator: =
 Left Var Name: blockA
 Right(2) Var Name: {firstName:'John', lastName:'Doe', age:50, eyeColor:'blue'}
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 12 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 5 Source: blockB = ['hi 2','hello 2'] Operator: =
 Left Var Name: blockB
 Right(2) Var Name: ['hi 2','hello 2']

UpdateExpression
 HelperParentType: ExpressionStatement HelperParentName: 14 NestedParentType: ExpressionStatement > ExpressionStatement Parent Type: expression Indent: 10 Length : 2 Source: i++ Operator: ++
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 16 NestedParentType: ExpressionStatement > ExpressionStatement Parent Type: expression Indent: 10 Length : 3 Source: i += 1 Operator: +=
 Left Var Name: i
 Right(2) Var Name: 1
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 18 NestedParentType: ExpressionStatement > ExpressionStatement Parent Type: expression Indent: 10 Length : 3 Source: i -= 1 Operator: -=
 Left Var Name: i
 Right(2) Var Name: 1
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 20 NestedParentType: ExpressionStatement > VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: block1 = {} Operator: =
 Left Var Name: block1
 Right(2) Var Name: {}
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 21 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block1.name = 'ONE' Operator: =
 Left Var Name: block1.name
 Right(4) Var Name: 'ONE'
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 22 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block1.lname= 'TWO' Operator: =
 Left Var Name: block1.lname
 Right(4) Var Name: 'TWO'
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 23 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: block2 = [] Operator: =
 Left Var Name: block2
 Right(2) Var Name: []
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 24 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block2[1] = 'THREE' Operator: =
 Left Var Name: block2[1]
 Right(4) Var Name: 'THREE'
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 25 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block2[2] = 'FOUR' Operator: =
 Left Var Name: block2[2]
 Right(4) Var Name: 'FOUR'
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 26 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block2[3] = 'FOUR-2' Operator: =
 Left Var Name: block2[3]
 Right(4) Var Name: 'FOUR-2'
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 27 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: block3 = [] Operator: =
 Left Var Name: block3
 Right(2) Var Name: []
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 28 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 5 Source: block3[1] = {} Operator: =
 Left Var Name: block3[1]
 Right(4) Var Name: {}
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 29 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 7 Source: block3[1].name = 'FIVE' Operator: =
 Left Var Name: block3[1].name
 Right(6) Var Name: 'FIVE'
AssignmentExpression
 HelperParentType: ExpressionStatement HelperParentName: 30 NestedParentType: ExpressionStatement Parent Type: expression Indent: 10 Length : 7 Source: block3[1].lname = 'SIX' Operator: =
 Left Var Name: block3[1].lname
 Right(6) Var Name: 'SIX'
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 31 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 9 Source: f= (i>j) && (i>4) Operator: =
 Left Var Name: f
 Right(2) Var Name: (i>j) && (i>4)

BinaryExpression
 HelperParentType: ForStatement HelperParentName: 32 NestedParentType: ForStatement Parent Type: test Indent: 10 Length : 3 Source: k<20 Operator: <

UpdateExpression
 HelperParentType: ForStatement HelperParentName: 32 NestedParentType: ForStatement Parent Type: update Indent: 10 Length : 2 Source: k++ Operator: ++

BinaryExpression
 HelperParentType: ForStatement HelperParentName: 33 NestedParentType: BlockStatement > ExpressionStatement > ForStatement Parent Type: test Indent: 10 Length : 3 Source: k<25 Operator: <

UpdateExpression
 HelperParentType: ExpressionStatement HelperParentName: 0 NestedParentType: BlockStatement > ExpressionStatement Parent Type: expression Indent: 13 Length : 2 Source: k++ Operator: ++

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 34 NestedParentType: ExpressionStatement > ExpressionStatement Parent Type: 0 Indent: 12 Length : 9 Source: block1.name+' '+block1.lname Operator: +

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 35 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 12 Length : 15 Source: block2[1]+' '+block2[2]+' '+block2[3] Operator: +

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 36 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 12 Length : 13 Source: block3[1].name+' '+block3[1].lname Operator: +

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 37 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 12 Length : 9 Source: "cc:"+cc()+" dd:"+dd() Operator: +
        A) EXT. VAR: cc() CallExpression right 15
        A) EXT. VAR: dd() CallExpression right 13
VariableDeclarator
 HelperParentType: VariableDeclaration HelperParentName: 38 NestedParentType: VariableDeclaration Parent Type: 0 Indent: 11 Length : 3 Source: bb2 = bb Operator: =
 Left Var Name: bb2
 Right(2) Var Name: bb

BinaryExpression
 HelperParentType: ExpressionStatement HelperParentName: 39 NestedParentType: ExpressionStatement Parent Type: 0 Indent: 12 Length : 7 Source: "bb:"+bb2(1,2,3) Operator: +
        A) EXT. VAR: bb2(1,2,3) CallExpression right 13
